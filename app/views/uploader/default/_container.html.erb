<%= content_tag(:div, :id => field.id, :class => "uploader-dnd-area") do -%>
  <%= hidden_field(field.object_name, :fileupload_guid, :object => field.object) if field.object.new_record? %>
  
  <div class="uploader-files"></div>
  
	<div class="uploader-dnd-hints">  
	  <span class="uploader-button gray fileinput-button">
      <span><%= I18n.t('uploader.button') %></span>
      <%= fields_for field.object do |f| -%>
	      <%= f.fields_for field.method_name, field.klass.new do |m| -%>
          <%= m.file_field(:data, field.input_html) %>
	      <% end -%>
	    <% end -%>
    </span>
    
	  <div class="uploader-dnd-hint">
		  <%= I18n.t('uploader.or') %><span><%= I18n.t('uploader.drop') %></span>
	  </div>
	</div>
	
	<%= render :partial => "uploader/#{field.theme}/upload", :locals => {:field => field} %>
  <%= render :partial => "uploader/#{field.theme}/download", :locals => {:field => field} %>
  <%= render :partial => "uploader/#{field.theme}/sortable", :locals => {:field => field} if field.sortable? %>
  
	<script type="text/javascript">
    $(function() {
      var uploader, container;
      container = $("#<%= field.id %> div.uploader-files");

      $(document).off('change.descriptionUpdated');
      $(document).on('change.descriptionUpdated', 'input.asset-description', function(){
        url = $(this).attr('data-url');
        description = $(this).val();
        $.ajax({ url: url, data: { asset: { description: description } }, type: 'PUT' });
      });

      toggleSelector = function(inputFile){
          if (!<%= field.multiple? %>) {
              $inputFile  = $(inputFile);
              $uploadZone = $inputFile.parents('.uploader-dnd-hints');
              $fileBoxes  = $inputFile.parents('.uploader-dnd-area').find('.attach_item');
              if ($fileBoxes.length > 0)
                $uploadZone.hide();
              else
                $uploadZone.show();
          }
      };

      clearInvalidUploads = function(inputFile, message){
          $inputFile  = $(inputFile);
          $uploadArea = $inputFile.parents('.uploader-dnd-area');
          $uploadArea.find('div[id=asset_]').each(function(){
            $fileBox = $(this);
            $fileBox.html(message || "<%= I18n.t('uploader.invalid_upload') %>");
            setTimeout(function(){$fileBox.fadeOut(function(){$fileBox.remove(); toggleSelector($inputFile)})},3000);
          });
      };
      
      $('#<%= field.id %> input[type="file"]').each(function(){
        $(this).fileupload({
          dataType: 'json',
          dropZone: $("#<%= field.id %>"),
          autoUpload: true,
          paramName: "asset[data]",
          formData: function(form){ return []; },
          filesContainer: container,
          namespace: 'uploader',
          uploadTemplateId: 'template-upload-<%= field.klass %>',
          downloadTemplateId: 'template-download-<%= field.klass %>'
        });

        $(this).on('fileuploadadded fileuploaddestroyed', function(){toggleSelector(this)});
        $(this).on('fileuploadfailed', function(e, data){
            errorMessage = data.response().jqXHR.responseJSON.data[0];
            clearInvalidUploads(this, errorMessage);
        });

        <% if field.exists? -%>
          uploader = ($(this).data('blueimp-fileupload') || $(this).data('fileupload'));
          uploader
            ._renderDownload(<%=raw field.values.to_json(:root => false) %>)
            .appendTo(container);
          toggleSelector(this);
        <% end -%>
      });
    });
  </script>
<% end -%>
